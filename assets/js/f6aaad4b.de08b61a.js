"use strict";(self.webpackChunkmy_owm_docs=self.webpackChunkmy_owm_docs||[]).push([[3240],{104:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=r(4848),n=r(8453);const i={title:"Project 4: Sensor Data on Screen",sidebar_position:6},a=void 0,o={id:"projects/ESP32-Starter-Kit/Project-4",title:"Project 4: Sensor Data on Screen",description:"Overview:",source:"@site/docs/projects/ESP32-Starter-Kit/Project-4.md",sourceDirName:"projects/ESP32-Starter-Kit",slug:"/projects/ESP32-Starter-Kit/Project-4",permalink:"/docs/projects/ESP32-Starter-Kit/Project-4",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/projects/ESP32-Starter-Kit/Project-4.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Project 4: Sensor Data on Screen",sidebar_position:6},sidebar:"projectsSidebar",previous:{title:"Project 3: Calibrating and Measuring an Object",permalink:"/docs/projects/ESP32-Starter-Kit/Project-3"},next:{title:"Project 5.1: One-way Data Communication - Message Display",permalink:"/docs/projects/ESP32-Starter-Kit/Project-5.1"}},c={},d=[{value:"Overview:",id:"overview",level:2},{value:"Material:",id:"material",level:2},{value:"Objectives:",id:"objectives",level:2},{value:"Hardware Assembly:",id:"hardware-assembly",level:2},{value:"Pin Connection:",id:"pin-connection",level:2},{value:"Pseudocode:",id:"pseudocode",level:2},{value:"What you should see:",id:"what-you-should-see",level:4}];function l(e){const t={a:"a",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"overview",children:"Overview:"}),"\n",(0,s.jsx)(t.p,{children:"Project 4 aims to create an integrated system using ESP32 microcontroller along with the MPU6050\r\nsensor and an ST7725 TFT display. This project focuses on capturing real-time data and displaying it\r\non a TFT display."}),"\n",(0,s.jsx)(t.h2,{id:"material",children:"Material:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Component"}),(0,s.jsx)(t.th,{children:"Image"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.canadarobotix.com/products/5134",children:"10 DOF IMU Sensor"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/IMU.png",width:"200"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.canadarobotix.com/products/3056",children:'1.8" TFT LCD Screen'})}),(0,s.jsx)(t.td,{children:(0,s.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/LCD-Screen.webp",width:"200"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.canadarobotix.com/products/2594",children:"ESP32 Dev Board"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/ESP32.webp",width:"200"})})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"objectives",children:"Objectives:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Sensor Data Acquisition: Utilize the MPU6050 to gather real-time accelerometer, gyroscope, and temperature data."}),"\n",(0,s.jsx)(t.li,{children:"Data Visualisation: Implement a graphical interface on the ST7735 TFT display to show sensor data."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"hardware-assembly",children:"Hardware Assembly:"}),"\n",(0,s.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/hardware-assembly-3.png",width:"700"}),"\n",(0,s.jsx)(t.h2,{id:"pin-connection",children:"Pin Connection:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"LCD Pin"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"To ESP32 Pin"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GND"}),(0,s.jsx)(t.td,{children:"Ground (0V)"}),(0,s.jsx)(t.td,{children:"GND"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"VCC_IN"}),(0,s.jsx)(t.td,{children:"Power"}),(0,s.jsx)(t.td,{children:"5V"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SDA"}),(0,s.jsx)(t.td,{children:"Serial Data"}),(0,s.jsx)(t.td,{children:"P21"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SCL"}),(0,s.jsx)(t.td,{children:"Serial Clock"}),(0,s.jsx)(t.td,{children:"P22"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"pseudocode",children:"Pseudocode:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'\tInclude necessary libraries for MPU6050 and TFT display\r\nDefine TFT display pins\r\nInitialize MPU6050 sensor object\r\nInitialize TFT display object with specified pins\r\n \r\nFunction setup:\r\n\tInitialize TFT display with black background, white text color, size 1 text\r\n\tInitialize serial communication at 115200 baud rate\r\n\tStart MPU6050 sensor\r\n\tConfigure MPU6050 settings for accelerometer, gyro, and bandwidth\r\n\tWait for 100 milliseconds\r\n \r\nFunction loop:\r\n\tClear the TFT display and reset cursor to top-left\r\n\tDeclare sensor event variables for acceleration, gyro, and temperature\r\n\tRetrieve sensor data from MPU6050\r\n \r\n\tDisplay "Acceleration" label and values for X, Y, Z on TFT display\r\n\tDisplay a separator line\r\n\tDisplay "Rotation" label and values for X, Y, Z on TFT display\r\n\tDisplay a separator line\r\n\tDisplay "Temperature" label and value on TFT display\r\n\tDisplay a separator line\r\n\tWait for 100 milliseconds\n'})}),"\n",(0,s.jsx)(t.h4,{id:"what-you-should-see",children:"What you should see:"}),"\n",(0,s.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/ESP32-9.png",width:"300"})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>o});var s=r(6540);const n={},i=s.createContext(n);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);